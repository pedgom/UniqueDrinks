// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniqueDrinks.Data;

namespace UniqueDrinks.Data.Migrations
{
    [DbContext(typeof(DrinksDB))]
    [Migration("20210715110751_addData")]
    partial class addData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Bebidas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaFK")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Stock")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaFK");

                    b.ToTable("Bebidas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaFK = 1,
                            Descricao = " MATEUS ROSÉ é um vinho leve, fresco, jovem e ligeiramente «pétillant»",
                            Nome = "Vinho Rose Mateus",
                            Preco = 20m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaFK = 2,
                            Descricao = "É vinificado pelo método tradicional do vinho do Porto.",
                            Nome = "Vinho do Porto Ferreira",
                            Preco = 30m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaFK = 3,
                            Descricao = "Vinho Moscatel de Setúbal",
                            Nome = "Veritas Moscatel",
                            Preco = 10m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaFK = 4,
                            Descricao = "Grant’s é um whisky extraordinário e um dos mais complexos produzidos na Escócia.",
                            Nome = "Grants Whisky",
                            Preco = 15m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 5,
                            CategoriaFK = 5,
                            Descricao = "Cîroc Vodka é uma marca de vodca eau-de-vie de luxo, fabricada com uvas da região Carântono-Marítimo, da França",
                            Nome = "Ciroc Vodka",
                            Preco = 30m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 6,
                            CategoriaFK = 6,
                            Descricao = "Nada bate um original, e Malibu não é apenas o original, é o mais vendido rum do Caribe com sabor natural de coco ",
                            Nome = "Malibu Rum",
                            Preco = 15m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 7,
                            CategoriaFK = 7,
                            Descricao = "Cachaça, o sabor e aroma perfeito da original caipirinha brasileira.",
                            Nome = "Cachaça 51",
                            Preco = 11m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 8,
                            CategoriaFK = 9,
                            Descricao = "Moet & Chandon, um champanhe de estilo único e elegante.",
                            Nome = "Moet&Chandon",
                            Preco = 50m,
                            Stock = "Sim"
                        },
                        new
                        {
                            Id = 9,
                            CategoriaFK = 10,
                            Descricao = "O sabor autêntico. Super Bock Original é a única cerveja portuguesa com 37 medalhas de ouro consecutivas",
                            Nome = "Super Bock Pack15",
                            Preco = 7m,
                            Stock = "Sim"
                        });
                });

            modelBuilder.Entity("UniqueDrinks.Models.Categorias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categoria = "Vinho"
                        },
                        new
                        {
                            Id = 2,
                            Categoria = "Vinho do Porto"
                        },
                        new
                        {
                            Id = 3,
                            Categoria = "Vinho Moscatel"
                        },
                        new
                        {
                            Id = 4,
                            Categoria = "Whisky"
                        },
                        new
                        {
                            Id = 5,
                            Categoria = "Gin e Vodka"
                        },
                        new
                        {
                            Id = 6,
                            Categoria = "Rum e Tequila"
                        },
                        new
                        {
                            Id = 7,
                            Categoria = "Cachaça e Aguardente"
                        },
                        new
                        {
                            Id = 8,
                            Categoria = "Licores"
                        },
                        new
                        {
                            Id = 9,
                            Categoria = "Champanhe e Espumante"
                        },
                        new
                        {
                            Id = 10,
                            Categoria = "Cerveja e Cidra"
                        });
                });

            modelBuilder.Entity("UniqueDrinks.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Contacto")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<DateTime>("Datanasc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contacto = 937492122,
                            Datanasc = new DateTime(1995, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pr@pr.com",
                            Nome = "Pedro Rafael"
                        },
                        new
                        {
                            Id = 2,
                            Contacto = 920562956,
                            Datanasc = new DateTime(1994, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jv@jv.com",
                            Nome = "Jose Vieira"
                        },
                        new
                        {
                            Id = 3,
                            Contacto = 914659935,
                            Datanasc = new DateTime(1999, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ms@ms.com",
                            Nome = "Maria Silva"
                        },
                        new
                        {
                            Id = 4,
                            Contacto = 936581003,
                            Datanasc = new DateTime(1990, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fs@fs.com",
                            Nome = "Filipe Santos"
                        },
                        new
                        {
                            Id = 5,
                            Contacto = 962813384,
                            Datanasc = new DateTime(1998, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "as@as.com",
                            Nome = "Ana Sousa"
                        },
                        new
                        {
                            Id = 6,
                            Contacto = 961883421,
                            Datanasc = new DateTime(1985, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bp@bp.com",
                            Nome = "Beatriz Pinto"
                        },
                        new
                        {
                            Id = 7,
                            Contacto = 917745362,
                            Datanasc = new DateTime(1978, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tm@tm.com",
                            Nome = "Tiago Mendonça"
                        });
                });

            modelBuilder.Entity("UniqueDrinks.Models.Imagens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BebidaFK")
                        .HasColumnType("int");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BebidaFK");

                    b.ToTable("Imagens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BebidaFK = 1,
                            Imagem = "Vinho-Mateus-Rose.jpg"
                        },
                        new
                        {
                            Id = 2,
                            BebidaFK = 2,
                            Imagem = "ferreira_Porto.jpg"
                        },
                        new
                        {
                            Id = 3,
                            BebidaFK = 3,
                            Imagem = "veritas_moscatel.jpg"
                        },
                        new
                        {
                            Id = 4,
                            BebidaFK = 4,
                            Imagem = "grants_whisky.jpg"
                        },
                        new
                        {
                            Id = 5,
                            BebidaFK = 5,
                            Imagem = "ciroc_vodka.jpg"
                        },
                        new
                        {
                            Id = 6,
                            BebidaFK = 6,
                            Imagem = "malibu_rum.jpg"
                        },
                        new
                        {
                            Id = 7,
                            BebidaFK = 7,
                            Imagem = "51_cachaça.jpg"
                        },
                        new
                        {
                            Id = 8,
                            BebidaFK = 8,
                            Imagem = "moet_champanhe.jpg"
                        },
                        new
                        {
                            Id = 9,
                            BebidaFK = 9,
                            Imagem = "superBock.jpg"
                        });
                });

            modelBuilder.Entity("UniqueDrinks.Models.Reservas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BebidaFK")
                        .HasColumnType("int");

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataReserva")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BebidaFK");

                    b.HasIndex("ClienteFK");

                    b.ToTable("Reservas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BebidaFK = 1,
                            ClienteFK = 1,
                            DataEntrega = new DateTime(2019, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2019, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 2
                        },
                        new
                        {
                            Id = 2,
                            BebidaFK = 2,
                            ClienteFK = 2,
                            DataEntrega = new DateTime(2019, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2019, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 3,
                            BebidaFK = 3,
                            ClienteFK = 3,
                            DataEntrega = new DateTime(2019, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2019, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 4,
                            BebidaFK = 4,
                            ClienteFK = 4,
                            DataEntrega = new DateTime(2020, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2020, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 5,
                            BebidaFK = 5,
                            ClienteFK = 5,
                            DataEntrega = new DateTime(2020, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2020, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 5
                        },
                        new
                        {
                            Id = 6,
                            BebidaFK = 6,
                            ClienteFK = 6,
                            DataEntrega = new DateTime(2020, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2020, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 2
                        },
                        new
                        {
                            Id = 7,
                            BebidaFK = 7,
                            ClienteFK = 7,
                            DataEntrega = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2021, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 3
                        },
                        new
                        {
                            Id = 8,
                            BebidaFK = 8,
                            ClienteFK = 3,
                            DataEntrega = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2021, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 1
                        },
                        new
                        {
                            Id = 11,
                            BebidaFK = 9,
                            ClienteFK = 2,
                            DataEntrega = new DateTime(2020, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataReserva = new DateTime(2020, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Estado = "Entregue",
                            Quantidade = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniqueDrinks.Models.Bebidas", b =>
                {
                    b.HasOne("UniqueDrinks.Models.Categorias", "Categoria")
                        .WithMany("ListaDeBebidas")
                        .HasForeignKey("CategoriaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Imagens", b =>
                {
                    b.HasOne("UniqueDrinks.Models.Bebidas", "Bebida")
                        .WithMany("ListaDeImagens")
                        .HasForeignKey("BebidaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bebida");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Reservas", b =>
                {
                    b.HasOne("UniqueDrinks.Models.Bebidas", "Bebida")
                        .WithMany("ListaDeClientes")
                        .HasForeignKey("BebidaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniqueDrinks.Models.Clientes", "Cliente")
                        .WithMany("ListaDeReservas")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bebida");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Bebidas", b =>
                {
                    b.Navigation("ListaDeClientes");

                    b.Navigation("ListaDeImagens");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Categorias", b =>
                {
                    b.Navigation("ListaDeBebidas");
                });

            modelBuilder.Entity("UniqueDrinks.Models.Clientes", b =>
                {
                    b.Navigation("ListaDeReservas");
                });
#pragma warning restore 612, 618
        }
    }
}
